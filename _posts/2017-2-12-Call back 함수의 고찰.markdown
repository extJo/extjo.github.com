---
layout: post
title: "Call-back 함수에 대한 고찰"
date: 2017-2-12 13:20:00 +0900
categories: nodejs
description: Call-back 함수에 대한 이야기..
permalink: /post/nodejs/2017/02/call-back-함수에-대한-고찰
---

1.어쩌다보니 Call-back
=============

처음에 콜백( call-back )함수에 대한 이야기를 들었을때는 상당히 난해했었습니다.
혼자 `node.js` 에 대해서 공부하다 보니 이런이야기가 나오더군요.
사실 html, css, javascript는 거의 겉핧기 식 정도로 알고있는 정도여서 간간히 call-back 이라는것이 있다고만 들었지, 직접 쓰게되는 날이 올줄이라고는 상상하지도 못했죠.
학교에서 배운거라고는 고작 함수를 call 하는 정도에서 그쳤기 때문이죠( 배움이 부족해서일수도.... )
여튼 이것저것 뒤져보니, 쉽게 다가가기 어려운 문서들만 주루루루룩 하고 나오더군요 그리하여서 작성해 봅니다.

***

2.Call-back이 뭐지?
=============

그러면 Call back 이 뭐냐? 라고 생각이 맨 처음으로 들더군요.
항상 그렇지만 정의를 먼저 찾아보곤해서 한번 찾아봤습니다

>프로그래밍에서 콜백(callback)은 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 말한다. 콜백을 넘겨받는 코드는 이 콜백을 필요에 따라 즉시 실행할 수도 있고, 아니면 나중에 실행할 수도 있다.
>일반적으로 콜백수신 코드로 콜백 코드(함수)를 전달할 때는 콜백 함수의 포인터 (핸들), 서브루틴 또는 람다함수의 형태로 넘겨준다. 콜백수신 코드는 실행하는 동안에 넘겨받은 콜백 코드를 필요에 따라 호출하고 다른 작업을 실행하는 경우도 있다.
>다른 방식으로는 콜백수신 코드는 넘겨받은 콜백 함수를 '핸들러'로서 등록하고, 콜백수신 함수의 동작 중 어떠한 반응의 일부로서 나중에 호출할 때 사용할 수도 있다 (비동기 콜백).
>콜백은 폴리모피즘과 제네릭프로그래밍의 단순화된 대체 수법이며, 콜백 수신 함수의 정확한 동작은 콜백 함수에 의해 바뀐다. 콜백은 코드 재사용을 할 때 유용하다.
>***- 위키백과의 callback 중에서***

하나씩 차근차근 읽어 봅시다.

>프로그래밍에서 콜백(callback)은 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 말한다.

Call-back은 다른 코드의 인수로서 넘겨주는 실행 가능한 코드를 말한다. 라고 하죠? 그러면 코드를 parameter로 넘겨 줄 수 있다는 말인겁니다.
이게 왜 가능하지? 라고 의구심이 들기 시작되죠. 자바스크립트에서는 함수가 일급 객체입니다.
그러면 일급 객체( first-class )가 뭐냐?

또 위키백과로 가봅시다.

>다음과 같은 조건을 만족할 때 일급 객체( first-class )라고 말할 수 있다.
>1. 변수나 데이터 구조안에 담을 수 있다.
>2. 파라미터로 전달 할 수 있다.
>3. 반환값(return value)으로 사용할 수 있다.
>4. 할당에 사용된 이름과 관계없이 고유한 구별이 가능하다.
>5. 동적으로 프로퍼티 할당이 가능하다.
>***- 위키백과의 first-class 중에서***

자 이제 본론으로 돌아와서

>콜백을 넘겨받는 코드는 이 콜백을 필요에 따라 즉시 실행할 수도 있고, 아니면 나중에 실행할 수도 있다.

이말인즉슨 결국 개발자가 콜백을 가지고 자유자제로 다룰수 있다는 말인거죠. 내가 콜백으로 넘겨받는 코드에서 *( 예를들어서 어떤 함수를 파라미터로 받았다고 합시다 )* 콜백을 써먹고 싶은곳 *( 파라미터로 받은 함수를 쓰고싶은 곳 )* 에 사용할 수 있다는 말이겠죠?

>일반적으로 콜백수신 코드로 콜백 코드(함수)를 전달할 때는 콜백 함수의 포인터 (핸들), 서브루틴 또는 람다함수의 형태로 넘겨준다. 콜백수신 코드는 실행하는 동안에 넘겨받은 콜백 코드를 필요에 따라 호출하고 다른 작업을 실행하는 경우도 있다.

>다른 방식으로는 콜백수신 코드는 넘겨받은 콜백 함수를 '핸들러'로서 등록하고, 콜백수신 함수의 동작 중 어떠한 반응의 일부로서 나중에 호출할 때 사용할 수도 있다 (비동기 콜백).

비동기 콜백에서는 콜백을 넘겨받은 코드에서 어떤 이벤트 *( Event )* 가 발생했을때 그 콜백을 사용 할 수 있다 라는 말인것이죠.
예를들어서 뮤직플레이어가 있다고 가정합시다. 사용자가 음악을 듣다가 음악이 너무좋아서 다운을 받겠다고 다운로드 버튼 *( Event )* 을 눌렀습니다. 그러면 다운로드가 이루어지는 동안 *( call back 함수를 받는 코드 동작 )* 에는 사용자가 계속 음악을 듣고있죠? 그 이후에 다운로드가 완료되어서 다운로드가 완료되었다는 메세지 *( call back 함수 동작 )* 를 사용자에게 보낼 수 있는 것이죠.

>콜백은 폴리모피즘과 제네릭프로그래밍의 단순화된 대체 수법이며, 콜백 수신 함수의 정확한 동작은 콜백 함수에 의해 바뀐다. 콜백은 코드 재사용을 할 때 유용하다.

마지막 부분에서는 콜백을 사용하는 이유에 대해서 설명하고 있습니다.

***

3.Call-back 을 어떻게 사용할까?
=============

그러면 이제 어떻게 사용하는지 알아보겠습니다.

~~~javascript
var fs = require('fs');
// 파일 시스템 모듈 추출

var data = 'Hello world!!!!!!';

fs.writeFile('TextFileOtherWrite.txt', data, 'utf8', function (error){
  console.log('Write file async complete');
});
~~~

위는 `node.js`의 파일 출력과 관련된 내용입니다.
파일 출력을 위해서 file system의 모듈을 추출 한 다음, 모듈에서 `writeFile` 이라는 비동기식 파일 출력 메소드를 사용했습니다.
위의 코드에서 `fs.writeFile()`은 callback 함수를 넘겨받은 코드입니다.

~~~javascript
function (error){
  console.log('Write file async complete');
}
~~~
위의 코드가 콜백 함수로써 `fs.writeFile()`의 파라미터로 넘어갔기 때문이죠
그래서 파일 쓰기가 완료되었다면, 위의 코드가 동작하면서 콘솔창에서 `Write file async complete`를 출력하게 됩니다.

***

4.마무리
=============

이제 call-back에 대해서 이해하게 되었고, call-back을 써먹을 수 있게됬습니다!! `짝짝짝짝`
아직 프로젝트에 call-back을 적용시켜보지 못했지만, call-back을 사용함으로써, single thread *(특히 node.js)* 에서 하나의 이벤트 처리중에 다른일을 할 수 있다는 것은 매우 매력적으로 다가옵니다. 부족한 제 글이 도움이 됬으면 좋겠습니다.
**피드백은 언제나 환영입니다.**
